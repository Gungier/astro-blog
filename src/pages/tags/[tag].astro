---
import type { MarkdownInstance } from "astro";
import BlogPost from "../../components/BlogPost.astro";
import NavBar from "../../components/NavBar.astro";
import Layout from "../../layouts/Layout.astro";

//(value: MarkdownInstance<Record<string, any>>, index: number, array: MarkdownInstance<Record<string, any>>[]) => any
export async function getStaticPaths(): Promise<any> {
  const allPosts = await Astro.glob('../posts/*.md');

  const uniqueTags: string[] | unknown[] = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];

  return uniqueTags.map((tag: any) => {
    const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  } );
} 

const { tag } = Astro.params;
const { posts } = Astro.props;
---


<Layout pageTitle={tag}>
  <NavBar />
  <p>Posts tagged with {tag}</p>
  <ul>
    {
      (posts as any).map((post: { url: any; frontmatter: { title: any; }; }) => (
        <BlogPost url={post.url} title={post.frontmatter.title} />
      ))
    }
  </ul>
</Layout>
